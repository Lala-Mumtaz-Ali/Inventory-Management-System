using Inventory.Data;
using Inventory.Models;
using Microsoft.AspNetCore.Mvc;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.EntityFrameworkCore;
using Mysqlx.Crud;
using AutoMapper;
using System.Diagnostics.CodeAnalysis;
using Microsoft.CodeAnalysis.Completion;
using MySql.Data.MySqlClient;


namespace Inventory.Repository.Services
{
    public class ProductRepository
    {
        private AppDbContext _context;
        private readonly IMapper _mapper;
        public ProductRepository(AppDbContext context, IMapper mapper)
        {

            _context = context;
            _mapper = mapper;
        }


        public async Task<IEnumerable<Product>> GetAllProducts()
        {
            return await _context.Product.ToListAsync();
        }

        public async Task<AnalysisDTO> GetAnalysis(int id)
        {
            var product = await (from p in _context.Product
                                 where p.Id == id
                                 select new AnalysisDTO
                                 {

                                     Name = p.Name,
                                     current_price = p.Current_Price,
                                     description = p.Description,

                                 }).SingleAsync();


            if (product == null)
                throw new KeyNotFoundException("No product found with this Id");


            var product_info = await (from pl in _context.Product_Lot
                                      where pl.Product_id == id
                                      join w in _context.WareHouse on pl.WareHouse_Id equals w.Id
                                      group new { pl, w } by pl.WareHouse_Id into groupData
                                      select new ProductWarehouse
                                      {

                                          Warehouse_id = groupData.Key,
                                          Warehouse_name = groupData.Select(g => g.w.Name).First(),
                                          TotalQuantity = groupData.Sum(g => g.pl.Quantity),
                                          NumberOfLots = groupData.Count()
                                      }).ToListAsync();

            product.Warehouse_List = product_info;

            return product;

        }

        public async Task<Product> GetProductInfo(int Id)
        {
            var product = await (from p in _context.Product
                                 where p.Id == Id
                                 select p
                          ).FirstOrDefaultAsync();

            if (product == null)
                throw new KeyNotFoundException("No Product found with this Id");

            return product;
        }

        public async Task<int> CreateProduct(ProductCreationDTO productDTO)
        {


            bool nameExists = await _context.Product
                            .AnyAsync(p => p.Name == productDTO.Name);
            if (nameExists)
            {
                throw new Exception("A product with the same name already exists.");
            }

            // Validate if the category ID exists
            bool categoryExists = await _context.Category
                                                .AnyAsync(c => c.Id == productDTO.Category_id);
            if (!categoryExists)
            {
                throw new Exception("The provided Category ID does not exist.");
            }
            try
            {
                var product = new Product
                {
                    Name = productDTO.Name,
                    Category_id = productDTO.Category_id,
                    Current_Price = productDTO.Current_Price,
                    Description = productDTO.Description,

                    Low_Stock_Threshold = productDTO.Low_Stock_Threshold
                };
                // Add the product to the context
                await _context.Product.AddAsync(product);

                // Save changes to the database
                await _context.SaveChangesAsync();

                // The product ID is automatically generated by the database and assigned to the product object
                return product.Id;  // Returning the generated ID

            }

            catch (DbUpdateException ex)  // Catch DbUpdateException
            {
                // Check for the inner exception (MySQL specific error)


                // Log the exception or inspect error code




                // General catch for other DB update issues
                throw new Exception("An error occurred while saving the product: " + ex.Message);
            }
            catch (ArgumentException ex)  // Handle custom validation error for Name
            {
                throw new Exception(ex.Message);
            }
            catch (Exception ex)  // Catch any other unforeseen errors
            {
                throw new Exception("An unexpected error occurred: " + ex.Message);
            }
        }

        public async Task<IEnumerable<Product>> Get_Main_Filtered_Products(string category)
        {
            int? id = await (from c in _context.Category
                             where c.Name == category
                             select c.Id).FirstOrDefaultAsync();

            if (id == 0)
                throw new KeyNotFoundException("Category Not Found");

            IQueryable<Product> products = from p in _context.Product
                                           where p.Category_id == id
                                           select p;

            return await products.ToListAsync();
        }


        public async Task Update(int Id, ProductUpdateDTO product)
        {

            Product? existingProduct = await _context.Product.FirstOrDefaultAsync(e => e.Id == Id);

            if (existingProduct == null)
                throw new Exception("Product not found");
            try
            {
                _mapper.Map(product, existingProduct);
                _context.Product.Update(existingProduct);
                await _context.SaveChangesAsync();

            }

            catch (DbUpdateException ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public async Task delete(int product_id)
        {
            Product? product = await _context.Product.FirstOrDefaultAsync(e => e.Id == product_id);

            if (product != null)
            {
                _context.Product.Remove(product);
                _context.SaveChanges();

            }

            else
            {
                throw new KeyNotFoundException("Category Not Found");

            }
        }


        public async Task<IEnumerable<Product_Lot>> GetAllProductLots()
        {
            return await _context.Product_Lot.ToListAsync();
        }


    }
}